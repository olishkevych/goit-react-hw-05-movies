{"version":3,"file":"static/js/585.e316893b.chunk.js","mappings":"gLACA,EAA8B,+BAA9B,EAA2E,+BAA3E,EAAyH,gC,SCK5GA,EAAY,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAC5CC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAAC,KAAD,CACEC,GAAE,kBAAaJ,GACfK,MAAO,CAAEC,KAAMJ,GACfK,UAAWC,EAHb,WAKE,gBACED,UAAWC,EACXC,IAAKX,EACLY,IAAKX,EAAM,0CAAsCA,GAAWY,EAC5DC,MAAM,SAER,iBAAKL,UAAWC,EAAhB,UACGV,EAAM,KAAGG,EAAK,SAItB,ECzBD,EAA+B,mCAA/B,EAAgF,kCCInEY,G,OAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC7B,OACE,eAAIP,UAAWC,EAAf,SACGM,EAAOC,KAAI,SAAAC,GAAK,OACf,eAAmBT,UAAWC,EAA9B,UACE,SAACX,EAAD,CACEC,MAAOkB,EAAMlB,MACbC,OAAQiB,EAAMC,YACdjB,QAASgB,EAAME,GACfjB,KAAMe,EAAMG,aAAaC,UAAU,EAAG,MALjCJ,EAAME,GADA,KAYtB,E,sICUD,EA3B+B,WAC7B,OAA4CG,EAAAA,EAAAA,WAC1C,kCAAMC,KAAKC,MAAMC,eAAeC,QAAQ,0BAAxC,QAA8D,EAA9D,IADF,eAAOC,EAAP,KAAuBC,EAAvB,KAGA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAAkCR,EAAAA,EAAAA,WAAS,GAA3C,eAAOS,EAAP,KAAkBC,EAAlB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,KAAIN,EAAeO,OAAS,GAA5B,CACA,IAAMC,EAAyB,mCAAG,oGAE9BH,GAAa,GAFiB,UAGFI,EAAAA,EAAAA,MAHE,OAGxBC,EAHwB,OAI9BT,EAAkBS,GAClBZ,eAAea,QAAQ,iBAAkBf,KAAKgB,UAAUF,IAL1B,gDAO9BP,EAAS,EAAD,IAPsB,yBAS9BE,GAAa,GATiB,4EAAH,qDAY/BG,GAbqC,CActC,GAAE,CAACR,EAAeO,SAEZ,CAAEP,eAAAA,EAAgBE,MAAAA,EAAOE,UAAAA,EACjC,E,6CCCD,EArBa,WACX,IAAMzB,EAAQkC,IACNb,EAAqCrB,EAArCqB,eAAgBE,EAAqBvB,EAArBuB,MAAOE,EAAczB,EAAdyB,UAM/B,OAJIF,GACFY,EAAAA,GAAAA,QAAA,gCAAuCZ,GAASa,EAAAA,IAIhD,2BACGX,IAAa,SAACY,EAAA,EAAD,KACd,SAAC,KAAD,IACChB,EAAeO,OAAS,GACvB,SAACpB,EAAA,EAAD,CAAcC,OAAQY,KAEtB,mBAIP,C","sources":["webpack://movie-library/./src/components/MovieCard/MovieCard.module.css?a4e5","components/MovieCard/MovieCard.jsx","webpack://movie-library/./src/components/MovieGallery/MovieGallery.module.css?cb9b","components/MovieGallery/MovieGallery.jsx","hooks/useFetchTrendingMovies.js","pages/Home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"GalleryText\":\"MovieCard_GalleryText__8uG-9\",\"GalleryLink\":\"MovieCard_GalleryLink__dE8qG\",\"GalleryImage\":\"MovieCard_GalleryImage__dJkpO\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport placeholder from '../../images/poster-placeholder.jpg';\nimport css from './MovieCard.module.css';\n\nexport const MovieCard = ({ title, poster, movieId, year }) => {\n  const location = useLocation();\n\n  return (\n    <Link\n      to={`/movies/${movieId}`}\n      state={{ from: location }}\n      className={css.GalleryLink}\n    >\n      <img\n        className={css.GalleryImage}\n        alt={title}\n        src={poster ? `https://image.tmdb.org/t/p/w200/${poster}` : placeholder}\n        width=\"200\"\n      />\n      <div className={css.GalleryText}>\n        {title} ({year})\n      </div>\n    </Link>\n  );\n};\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string,\n  movieId: PropTypes.number.isRequired,\n  year: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"MovieGallery\":\"MovieGallery_MovieGallery__MEPTo\",\"GalleryItem\":\"MovieGallery_GalleryItem__z98+3\"};","import { MovieCard } from 'components/MovieCard/MovieCard';\nimport PropTypes from 'prop-types';\nimport css from './MovieGallery.module.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const MovieGallery = ({ movies }) => {\n  return (\n    <ul className={css.MovieGallery}>\n      {movies.map(movie => (\n        <li key={movie.id} className={css.GalleryItem}>\n          <MovieCard\n            title={movie.title}\n            poster={movie.poster_path}\n            movieId={movie.id}\n            year={movie.release_date.substring(0, 4)}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieGallery.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { fetchTrendingMovies } from 'services/api/api';\n\nconst useFetchTrendingMovies = () => {\n  const [trendingMovies, setTrendingMovies] = useState(\n    () => JSON.parse(sessionStorage.getItem('trendingMovies')) ?? []\n  );\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (trendingMovies.length > 0) return;\n    const handleFetchTrendingMovies = async () => {\n      try {\n        setIsLoading(true);\n        const fetchedMovies = await fetchTrendingMovies();\n        setTrendingMovies(fetchedMovies);\n        sessionStorage.setItem('trendingMovies', JSON.stringify(fetchedMovies));\n      } catch (err) {\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    handleFetchTrendingMovies();\n  }, [trendingMovies.length]);\n\n  return { trendingMovies, error, isLoading };\n};\n\nexport default useFetchTrendingMovies;\n","import { MovieGallery } from 'components/MovieGallery/MovieGallery';\nimport useFetchTrendingMovies from 'hooks/useFetchTrendingMovies';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { toastConfig } from 'services/toastify/toastConfig';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Home = () => {\n  const state = useFetchTrendingMovies();\n  const { trendingMovies, error, isLoading } = state;\n\n  if (error) {\n    toast.warning(`Something went wrong. ${error}`, toastConfig);\n  }\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      <ToastContainer />\n      {trendingMovies.length > 0 ? (\n        <MovieGallery movies={trendingMovies} />\n      ) : (\n        <p></p>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["MovieCard","title","poster","movieId","year","location","useLocation","to","state","from","className","css","alt","src","placeholder","width","MovieGallery","movies","map","movie","poster_path","id","release_date","substring","useState","JSON","parse","sessionStorage","getItem","trendingMovies","setTrendingMovies","error","setError","isLoading","setIsLoading","useEffect","length","handleFetchTrendingMovies","fetchTrendingMovies","fetchedMovies","setItem","stringify","useFetchTrendingMovies","toast","toastConfig","Loader"],"sourceRoot":""}